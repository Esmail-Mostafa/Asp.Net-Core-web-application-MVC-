<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Another action" xml:space="preserve">
    <value>Another action</value>
  </data>
  <data name="Cancle" xml:space="preserve">
    <value>Cancle</value>
  </data>
  <data name="chosse Department" xml:space="preserve">
    <value>chosse Department</value>
  </data>
  <data name="Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="CPU USAGE" xml:space="preserve">
    <value>CPU USAGE</value>
  </data>
  <data name="Create new Department" xml:space="preserve">
    <value>Create new Department</value>
  </data>
  <data name="Create New Employee" xml:space="preserve">
    <value>Create New Employee</value>
  </data>
  <data name="DASHBOARD" xml:space="preserve">
    <value>DASHBOARD</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="Department card" xml:space="preserve">
    <value>Department card</value>
  </data>
  <data name="Department Code" xml:space="preserve">
    <value>Department Code</value>
  </data>
  <data name="Department Name" xml:space="preserve">
    <value>Department Name</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Edit to DEpartment" xml:space="preserve">
    <value>Edit to DEpartment</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="employee" xml:space="preserve">
    <value>employee</value>
  </data>
  <data name="employee cards" xml:space="preserve">
    <value>employee cards</value>
  </data>
  <data name="Emplyoo Name" xml:space="preserve">
    <value>Emplyoo Name</value>
  </data>
  <data name="help" xml:space="preserve">
    <value>help</value>
  </data>
  <data name="HireDate" xml:space="preserve">
    <value>HireDate</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="IsActive" xml:space="preserve">
    <value>IsActive</value>
  </data>
  <data name="LAST WEEK" xml:space="preserve">
    <value>LAST WEEK</value>
  </data>
  <data name="ltr" xml:space="preserve">
    <value>ltr</value>
  </data>
  <data name="mail invalid" xml:space="preserve">
    <value>mail invalid</value>
  </data>
  <data name="max lenght 50" xml:space="preserve">
    <value>max lenght 50</value>
  </data>
  <data name="min lenght 3" xml:space="preserve">
    <value>min lenght 3</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="name is required" xml:space="preserve">
    <value>name is required</value>
  </data>
  <data name="NEW COMMENTS" xml:space="preserve">
    <value>NEW COMMENTS</value>
  </data>
  <data name="NEW TASKS" xml:space="preserve">
    <value>NEW TASKS</value>
  </data>
  <data name="NEW TICKETS" xml:space="preserve">
    <value>NEW TICKETS</value>
  </data>
  <data name="NEW VISITORS" xml:space="preserve">
    <value>NEW VISITORS</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="person_add" xml:space="preserve">
    <value>person_add</value>
  </data>
  <data name="range btw 2000 10000" xml:space="preserve">
    <value>range btw 2000 10000</value>
  </data>
  <data name="Salary" xml:space="preserve">
    <value>Salary</value>
  </data>
  <data name="Salary is required" xml:space="preserve">
    <value>Salary is required</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Something else here" xml:space="preserve">
    <value>Something else here</value>
  </data>
  <data name="TODAY" xml:space="preserve">
    <value>TODAY</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="USERS" xml:space="preserve">
    <value>USERS</value>
  </data>
  <data name="Welcome To Employee" xml:space="preserve">
    <value>Welcome To Employee</value>
  </data>
  <data name="YESTERDAY" xml:space="preserve">
    <value>YESTERDAY</value>
  </data>
</root>